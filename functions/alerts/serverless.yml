# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: alerts

resources:
  Resources:
    RunRuleQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "RunRuleQueue-${self:provider.stage}"

        
provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stage: ${opt:stage, 'rpdash'}
  environment:
    base_url: 'https://invest.realpeek.com/'
    stage: ${self:provider.stage}
    ruleQueue:
      Ref: RunRuleQueue
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "es:ESHttpGet"
        - "es:ESHttpPost"
        - "es:ESHttpDelete"
        - "es:ESHttpPut"
        - "es:ESHttpHead"
      Resource:
        - "arn:aws:es:us-west-2:450322736372:domain/realpeek/*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:SendMessageBatch"
        - "sqs:GetQueueUrl"
      Resource:
        Fn::GetAtt:
          - RunRuleQueue
          - Arn
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
      Resource:
        - "arn:aws:dynamodb:us-west-2:450322736372:table/SavedSearches"
        - "arn:aws:dynamodb:us-west-2:450322736372:table/Users"
        - "arn:aws:dynamodb:us-west-2:450322736372:table/Users/index/*"
        - "arn:aws:dynamodb:us-west-2:450322736372:table/Tenants"
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminGetUser"
      Resource:
        - "arn:aws:cognito-idp:us-west-2:450322736372:userpool/*"
    - Effect: "Allow"
      Action: "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:us-west-2:450322736372:function:search-${self:provider.stage}-cmaCalculation"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


functions:
  loadRules:
    handler: handler.load_rules
  updateRule:
    handler: handler.update_rule
    events:
      - stream: arn:aws:dynamodb:us-west-2:450322736372:table/SavedSearches/stream/2018-11-08T20:56:42.327
  runRuleBatch:
    handler: handler.run_rule_batch
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - RunRuleQueue
              - Arn
  runAllRules:
    handler: handler.run_all_rules
    events:
      - schedule:
          name: email-alerts-instant-${self:provider.stage}
          description: 'Run rules every 15 minutes to process INSTANT email alerts'
          rate: rate(15 minutes)
          enabled: true
          input:
            frequency: INSTANTLY
      - schedule:
          name: email-alerts-morning-${self:provider.stage}
          description: 'Run rules every morning to process DAILY and WEEKLY email alerts'
          rate: cron(0 17 * * ? *)  # run at 5pm UTC(9am PST) every day
          enabled: true
          input:
            frequency: DAILY
            time_of_day: MORNING
      # - schedule:
      #     name: email-alerts-evening-${self:provider.stage}
      #     description: 'Run rules every evening to process DAILY and WEEKLY email alerts'
      #     rate: cron(0 2 * * ? *)  # run at 2am UTC(6pm PST) every day
      #     enabled: true
      #     input:
      #       frequency: DAILY
      #       time_of_day: EVENING


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

