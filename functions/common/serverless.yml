# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: common # NOTE: update this with your service name

# you can add CloudFormation resource templates here
resources:
  Resources:
    ConfigLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
          - AuthorizerLambdaFunction
          - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - 
              - "arn:aws:execute-api:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":"
              - Ref: AppApiGateway
              - "/*/*/*"
    AppApiGateway:
      Type: AWS::ApiGateway::RestApi 
      Properties:
        Name: AppApiGateway
    ApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: MultiTenant_Cognito
        RestApiId: 
          Ref: AppApiGateway
        Type: TOKEN
        AuthorizerUri:
          Fn::Join: 
            - ""
            - 
              - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: 
                  - AuthorizerLambdaFunction
                  - Arn
              - "/invocations"
  Outputs:
    apiGatewayAuthorizerId:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: apiGateway-${self:provider.stage}-AuthorizerId
    apiGatewayRestApiId:
      Value:
        Ref: AppApiGateway
      Export:
        Name: apiGateway-${self:provider.stage}-restApiId
    apiGatewayRestApiRootResourceId:
      Value:
         Fn::GetAtt:
          - AppApiGateway
          - RootResourceId
      Export:
        Name: apiGateway-${self:provider.stage}-rootResourceId

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stage: ${opt:stage, 'rpdash'}
  environment:
    stage: ${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
      Resource:
        - "arn:aws:dynamodb:us-west-2:450322736372:table/Tenants"
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
      Resource:
        - "arn:aws:dynamodb:us-west-2:450322736372:table/Users"
    - Effect: "Allow"
      Action: "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:us-west-2:450322736372:function:common-${self:provider.stage}-log_activity"

functions:
  authorizer:
    handler: handler.authorizer
  log_activity:
    handler: handler.log_user_activity
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-sam
